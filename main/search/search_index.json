{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"install/","title":"Install","text":"<p>You can install the pre-compiled binary (in several ways), or compile from source. We also provide a GitHub action to easily install Kyverno-JSON in your workflows.</p>"},{"location":"install/#install-the-pre-compiled-binary","title":"Install the pre-compiled binary","text":""},{"location":"install/#homebrew-tap","title":"Homebrew tap","text":"<p>add tap:</p> <pre><code>brew tap kyverno/kyverno-json https://github.com/kyverno/kyverno-json\n</code></pre> <p>install kyverno-json:</p> <pre><code>brew install kyverno/kyverno-json/kyverno-json\n</code></pre>"},{"location":"install/#manually","title":"Manually","text":"<p>Download the pre-compiled binaries for your system from the releases page and copy them to the desired location.</p>"},{"location":"install/#using-go-install","title":"Using <code>go install</code>","text":"<p>You can install with <code>go install</code> with:</p> <pre><code>go install github.com/kyverno/kyverno-json@latest\n</code></pre>"},{"location":"install/#running-with-docker","title":"Running with Docker","text":"<p>Kyverno-JSON is also available as a Docker image which you can pull and run:</p> <pre><code>docker pull ghcr.io/kyverno/kyverno-json:&lt;version&gt;\n</code></pre> <p>Info</p> <p>Since kyverno-JSON relies on files for its operation (like ValidatingPolicy definitions), you will need to bind mount the necessary directories when running it via Docker.</p> <pre><code>$ docker run --rm                       \\\n    -v /path/on/host:/path/in/container \\\n    ghcr.io/kyverno/kyverno-json:&lt;version&gt;  \\\n    &lt;kyverno-json-command&gt;\n</code></pre>"},{"location":"install/#build-from-the-source-code","title":"Build from the source code","text":"<p>clone the repository:</p> <pre><code>git clone https://github.com/kyverno/kyverno-json.git\n</code></pre> <p>build the binaries:</p> <pre><code>cd kyverno-json\ngo mod tidy\nmake build\n</code></pre> <p>verify the build:</p> <pre><code>./kyverno-json version\n</code></pre>"},{"location":"intro/","title":"Introduction","text":"<p><code>kyverno-json</code> extends Kyverno policies to perform simple and efficient validation of data in JSON or YAML format. With <code>kyverno-json</code>, you can now use Kyverno policies to validate:</p> <ul> <li>Terraform files</li> <li>Dockerfiles</li> <li>Cloud configurations</li> <li>Authorization requests</li> </ul> <p>Simply convert your runtime or configuration data to JSON, and use Kyverno to audit or enforce policies for security and best practices compliance.</p> <p><code>kyverno-json</code> can be run as a:</p> <ol> <li>A Command Line Interface (CLI)</li> <li>A web application with a REST API</li> <li>A Golang library</li> </ol>"},{"location":"jp/","title":"Overview","text":"<p><code>kyverno-json</code> uses JMESPath community edition, a modern JMESPath implementation with lexical scopes support.</p> <p>The current payload, policy and rule are always available using the following builtin bindings:</p> Binding Usage <code>$payload</code> Current payload being analysed <code>$policy</code> Current policy being executed <code>$rule</code> Current rule being evaluated <p>Warning</p> <p>No protection is made to prevent you from overriding those bindings.</p>"},{"location":"playground/","title":"Playground","text":"<p>The <code>kyverno-json</code> playground can be used to test <code>kyverno-json</code> directly in your web browser.</p>"},{"location":"quick-start/","title":"Quick Start","text":"<p>See Install for the available options to install the CLI.</p>"},{"location":"quick-start/#validate-a-terraform-plan","title":"Validate a Terraform Plan","text":"<p>In this example we will use a Kyverno policy to validate a Terraform plan:</p>"},{"location":"quick-start/#create-the-payload","title":"Create the payload","text":"<p>Here is a Terraform plan that creates an AWS S3 bucket:</p> <pre><code>terraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~&gt; 4.16\"\n    }\n  }\n\n  required_version = \"&gt;= 1.2.0\"\n}\n\nprovider \"aws\" {\n  region = \"us-west-2\"\n}\n\nresource \"aws_s3_bucket\" \"example\" {\n  bucket = \"my-tf-test-bucket\"\n\n  tags = {\n    Name        = \"My bucket\"\n    Environment = \"Dev\"\n  }\n}\n</code></pre> <p>You can convert this to JSON using the following commands:</p> <p>output the plan: <pre><code>terraform plan -out tfplan.binary\n</code></pre> convert to JSON: <pre><code>terraform show -json tfplan.binary | jq &gt; payload.json\n</code></pre></p>"},{"location":"quick-start/#create-the-policy","title":"Create the policy","text":"<p>Create a <code>policy.yaml</code> file and paste the content below that checks for required labels:</p> <pre><code>apiVersion: json.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: s3\nspec:\n  rules:\n    - name: check-tags\n      assert:\n        all:\n        - check:\n            planned_values:\n              root_module:\n                ~.resources:\n                  values:\n                    (keys(tags_all)):\n                      (contains(@, 'Environment')): true\n                      (contains(@, 'Name')): true\n                      (contains(@, 'Team')): true\n</code></pre>"},{"location":"quick-start/#scan-the-payload","title":"Scan the payload","text":"<p>With the payload and policy above, we can invoke <code>kyverno-json</code> with the command below:</p> <pre><code>kyverno-json scan --payload payload.json --policy policy.yaml\n</code></pre> <p>The plan shown above will fail as it does not contain the <code>Team</code> tag.</p> <pre><code>Loading policies ...\nLoading payload ...\nPre processing ...\nRunning ( evaluating 1 resource against 1 policy ) ...\n- s3 / check-tags /  FAILED: all[0].check.planned_values.root_module.~.resources[0].values.(keys(tags_all)).(contains(@, 'Team')): Invalid value: false: Expected value: true\nDone\n</code></pre>"},{"location":"quick-start/#validate-a-kubernetes-resource","title":"Validate a Kubernetes Resource","text":"<p>For this example we will use a Kubernetes <code>Pod</code> payload.</p>"},{"location":"quick-start/#create-the-payload_1","title":"Create the payload","text":"<p>Create a <code>payload.yaml</code> file and paste the Pod declaration below in it:</p> <pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: pods-simple-pod\nspec:\n  containers:\n    - command:\n        - sleep\n        - \"3600\"\n      image: busybox:latest\n      name: pods-simple-container\n</code></pre> <p>This is a simple <code>Pod</code> with one container running the <code>busybox</code> latest docker image.</p> <p>Using the <code>latest</code> tag of an image is a bad practice. Let's write a policy to detect this.</p>"},{"location":"quick-start/#create-the-policy_1","title":"Create the policy","text":"<p>Create a <code>policy.yaml</code> file and paste the content below to block <code>latest</code> images:</p> <pre><code>apiVersion: json.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: pod-policy\nspec:\n  rules:\n    - name: no-latest\n      # Match payloads corresponding to pods\n      match:\n        any:\n        - apiVersion: v1\n          kind: Pod\n      assert:\n        all:\n        - message: Pod `{{ metadata.name }}` uses an image with tag `latest`\n          check:\n            spec:\n              # Iterate over pod containers\n              # Note the `~.` modifier, it means we want to iterate over array elements in descendants\n              ~.containers:\n                image:\n                  # Check that an image tag is present\n                  (contains(@, ':')): true\n                  # Check that the image tag is not `:latest`\n                  (ends_with(@, ':latest')): false\n</code></pre> <p>This policy iterates over pod containers, checking that the container image has a tag specified and that the tag being used is not <code>latest</code>.</p>"},{"location":"quick-start/#scan-the-payload_1","title":"Scan the payload","text":"<p>With the payload and policy above, we can invoke <code>kyverno-json</code> with the command below:</p> <pre><code>kyverno-json scan --payload payload.yaml --policy policy.yaml\n</code></pre> <p>This produces the output:</p> <pre><code>Loading policies ...\nLoading payload ...\nPre processing ...\nRunning ( evaluating 1 resource against 1 policy ) ...\n- pod-policy / no-latest /  FAILED: Pod `pods-simple-pod` uses an image with tag `latest`\nDone\n</code></pre>"},{"location":"apis/kyverno-json.v1alpha1/","title":"KyvernoJson (v1alpha1)","text":"<p>Package v1alpha1 contains API Schema definitions for the policy v1alpha1 API group</p>"},{"location":"apis/kyverno-json.v1alpha1/#resource-types","title":"Resource Types","text":"<ul> <li>ValidatingPolicy</li> <li>ValidatingPolicyList</li> </ul>"},{"location":"apis/kyverno-json.v1alpha1/#json-kyverno-io-v1alpha1-ValidatingPolicy","title":"<code>ValidatingPolicy</code>","text":"<p>Appears in:</p> <ul> <li>ValidatingPolicyList</li> </ul> <p>ValidatingPolicy is the resource that contains the policy definition.</p> Field Type Required Inline Description <code>apiVersion</code> <code>string</code> <code>json.kyverno.io/v1alpha1</code> <code>kind</code> <code>string</code> <code>ValidatingPolicy</code> <code>metadata</code> <code>meta/v1.ObjectMeta</code> <p>Standard object's metadata.</p> <code>spec</code> <code>ValidatingPolicySpec</code> <p>Policy spec.</p>"},{"location":"apis/kyverno-json.v1alpha1/#json-kyverno-io-v1alpha1-ValidatingPolicyList","title":"<code>ValidatingPolicyList</code>","text":"<p>ValidatingPolicyList is a list of ValidatingPolicy instances.</p> Field Type Required Inline Description <code>apiVersion</code> <code>string</code> <code>json.kyverno.io/v1alpha1</code> <code>kind</code> <code>string</code> <code>ValidatingPolicyList</code> <code>metadata</code> <code>meta/v1.ListMeta</code> No description provided. <code>items</code> <code>[]ValidatingPolicy</code> No description provided."},{"location":"apis/kyverno-json.v1alpha1/#json-kyverno-io-v1alpha1-Any","title":"<code>Any</code>","text":"<p>Appears in:</p> <ul> <li>ContextEntry</li> </ul> <p>Any can be any type.</p> Field Type Required Inline Description"},{"location":"apis/kyverno-json.v1alpha1/#json-kyverno-io-v1alpha1-Assert","title":"<code>Assert</code>","text":"<p>Appears in:</p> <ul> <li>ValidatingRule</li> </ul> <p>Assert defines collections of assertions.</p> Field Type Required Inline Description <code>any</code> <code>[]Assertion</code> <p>Any allows specifying assertions which will be ORed.</p> <code>all</code> <code>[]Assertion</code> <p>All allows specifying assertions which will be ANDed.</p>"},{"location":"apis/kyverno-json.v1alpha1/#json-kyverno-io-v1alpha1-Assertion","title":"<code>Assertion</code>","text":"<p>Appears in:</p> <ul> <li>Assert</li> </ul> <p>Assertion contains an assertion tree associated with a message.</p> Field Type Required Inline Description <code>message</code> <code>string</code> <p>Message is the message associated message.</p> <code>engine</code> <code>Engine</code> <p>Engine defines the default engine to use when evaluating expressions.</p> <code>check</code> <code>AssertionTree</code> <p>Check is the assertion check definition.</p>"},{"location":"apis/kyverno-json.v1alpha1/#json-kyverno-io-v1alpha1-AssertionTree","title":"<code>AssertionTree</code>","text":"<p>Appears in:</p> <ul> <li>Assertion</li> <li>Match</li> </ul> <p>AssertionTree represents an assertion tree.</p> Field Type Required Inline Description"},{"location":"apis/kyverno-json.v1alpha1/#json-kyverno-io-v1alpha1-ContextEntry","title":"<code>ContextEntry</code>","text":"<p>Appears in:</p> <ul> <li>ValidatingRule</li> </ul> <p>ContextEntry adds variables and data sources to a rule context.</p> Field Type Required Inline Description <code>name</code> <code>string</code> <p>Name is the entry name.</p> <code>variable</code> <code>Any</code> <p>Variable defines an arbitrary variable.</p>"},{"location":"apis/kyverno-json.v1alpha1/#json-kyverno-io-v1alpha1-Engine","title":"<code>Engine</code>","text":"<p>(Alias of <code>string</code>)</p> <p>Appears in:</p> <ul> <li>Assertion</li> <li>ValidatingPolicySpec</li> <li>ValidatingRule</li> </ul> <p>Engine defines the engine to use when evaluating expressions.</p>"},{"location":"apis/kyverno-json.v1alpha1/#json-kyverno-io-v1alpha1-Feedback","title":"<code>Feedback</code>","text":"<p>Appears in:</p> <ul> <li>ValidatingRule</li> </ul> <p>Feedback contains a feedback entry.</p> Field Type Required Inline Description <code>name</code> <code>string</code> <p>Name is the feedback entry name.</p> <code>value</code> <code>string</code> <p>Value is the feedback entry value (a JMESPath expression).</p>"},{"location":"apis/kyverno-json.v1alpha1/#json-kyverno-io-v1alpha1-Match","title":"<code>Match</code>","text":"<p>Appears in:</p> <ul> <li>ValidatingRule</li> </ul> <p>Match defines collections of assertion trees.</p> Field Type Required Inline Description <code>any</code> <code>[]AssertionTree</code> <p>Any allows specifying assertion trees which will be ORed.</p> <code>all</code> <code>[]AssertionTree</code> <p>All allows specifying assertion trees which will be ANDed.</p>"},{"location":"apis/kyverno-json.v1alpha1/#json-kyverno-io-v1alpha1-ValidatingPolicySpec","title":"<code>ValidatingPolicySpec</code>","text":"<p>Appears in:</p> <ul> <li>ValidatingPolicy</li> </ul> <p>ValidatingPolicySpec contains the policy spec.</p> Field Type Required Inline Description <code>engine</code> <code>Engine</code> <p>Engine defines the default engine to use when evaluating expressions.</p> <code>rules</code> <code>[]ValidatingRule</code> <p>Rules is a list of ValidatingRule instances.</p>"},{"location":"apis/kyverno-json.v1alpha1/#json-kyverno-io-v1alpha1-ValidatingRule","title":"<code>ValidatingRule</code>","text":"<p>Appears in:</p> <ul> <li>ValidatingPolicySpec</li> </ul> <p>ValidatingRule defines a validating rule.</p> Field Type Required Inline Description <code>name</code> <code>string</code> <p>Name is a label to identify the rule, It must be unique within the policy.</p> <code>engine</code> <code>Engine</code> <p>Engine defines the default engine to use when evaluating expressions.</p> <code>context</code> <code>[]ContextEntry</code> <p>Context defines variables and data sources that can be used during rule execution.</p> <code>match</code> <code>Match</code> <p>Match defines when this policy rule should be applied.</p> <code>exclude</code> <code>Match</code> <p>Exclude defines when this policy rule should not be applied.</p> <code>identifier</code> <code>string</code> <p>Identifier declares a JMESPath expression to extract a name from the payload.</p> <code>feedback</code> <code>[]Feedback</code> <p>Feedback declares rule feedback entries.</p> <code>assert</code> <code>Assert</code> <p>Assert is used to validate matching resources.</p>"},{"location":"catalog/policies/dockerfile/dockerfile-deny-expose-22/","title":"Dockerfile expose port 22 not allowed","text":"","tags":["dockerfile"]},{"location":"catalog/policies/dockerfile/dockerfile-deny-expose-22/#description","title":"Description","text":"<p>This Policy ensures that port 22 is not exposed in Dockerfile.</p>","tags":["dockerfile"]},{"location":"catalog/policies/dockerfile/dockerfile-deny-expose-22/#install","title":"Install","text":"","tags":["dockerfile"]},{"location":"catalog/policies/dockerfile/dockerfile-deny-expose-22/#in-cluster","title":"In cluster","text":"<pre><code>kubectl apply -f https://raw.githubusercontent.com/kyverno/kyverno-json/main/catalog/dockerfile/dockerfile-deny-expose-22.yaml\n</code></pre>","tags":["dockerfile"]},{"location":"catalog/policies/dockerfile/dockerfile-deny-expose-22/#download-locally","title":"Download locally","text":"<pre><code>curl -O https://raw.githubusercontent.com/kyverno/kyverno-json/main/catalog/dockerfile/dockerfile-deny-expose-22.yaml\n</code></pre>","tags":["dockerfile"]},{"location":"catalog/policies/dockerfile/dockerfile-deny-expose-22/#manifest","title":"Manifest","text":"<p>Original policy Raw</p> <pre><code>apiVersion: json.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  annotations:\n    description.policy.kyverno.io: This Policy ensures that port 22 is not exposed\n      in Dockerfile.\n    title.policy.kyverno.io: Dockerfile expose port 22 not allowed\n  creationTimestamp: null\n  labels:\n    dockerfile.tags.kyverno.io: dockerfile\n  name: dockerfile-deny-expose-port-22\nspec:\n  rules:\n  - assert:\n      all:\n      - check:\n          ~.(Stages[].Commands[?Name=='EXPOSE'][]):\n            (contains(Ports, '22') || contains(Ports, '22/TCP')): false\n        message: Port 22 exposure is not allowed\n    name: check-port-exposure\n</code></pre>","tags":["dockerfile"]},{"location":"catalog/policies/dockerfile/dockerfile-deny-latest-image/","title":"Dockerfile latest image tag not allowed","text":"","tags":["dockerfile"]},{"location":"catalog/policies/dockerfile/dockerfile-deny-latest-image/#description","title":"Description","text":"<p>This Policy ensures that no image uses the latest tag in Dockerfile.</p>","tags":["dockerfile"]},{"location":"catalog/policies/dockerfile/dockerfile-deny-latest-image/#install","title":"Install","text":"","tags":["dockerfile"]},{"location":"catalog/policies/dockerfile/dockerfile-deny-latest-image/#in-cluster","title":"In cluster","text":"<pre><code>kubectl apply -f https://raw.githubusercontent.com/kyverno/kyverno-json/main/catalog/dockerfile/dockerfile-deny-latest-image.yaml\n</code></pre>","tags":["dockerfile"]},{"location":"catalog/policies/dockerfile/dockerfile-deny-latest-image/#download-locally","title":"Download locally","text":"<pre><code>curl -O https://raw.githubusercontent.com/kyverno/kyverno-json/main/catalog/dockerfile/dockerfile-deny-latest-image.yaml\n</code></pre>","tags":["dockerfile"]},{"location":"catalog/policies/dockerfile/dockerfile-deny-latest-image/#manifest","title":"Manifest","text":"<p>Original policy Raw</p> <pre><code>apiVersion: json.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  annotations:\n    description.policy.kyverno.io: This Policy ensures that no image uses the latest\n      tag in Dockerfile.\n    title.policy.kyverno.io: Dockerfile latest image tag not allowed\n  creationTimestamp: null\n  labels:\n    dockerfile.tags.kyverno.io: dockerfile\n  name: dockerfile-deny-latest-image-tag\nspec:\n  rules:\n  - assert:\n      all:\n      - check:\n          ~.(Stages[].From.Image):\n            (contains(@, ':latest')): false\n        message: Latest tag is not allowed\n    name: check-latest-tag\n</code></pre>","tags":["dockerfile"]},{"location":"catalog/policies/dockerfile/dockerfile-disallow-apt/","title":"Ensure apt is not used in Dockerfile","text":"","tags":["dockerfile"]},{"location":"catalog/policies/dockerfile/dockerfile-disallow-apt/#description","title":"Description","text":"<p>This Policy ensures that apt isnt used but apt-get can be used as apt interface is less stable than apt-get and so this preferred.</p>","tags":["dockerfile"]},{"location":"catalog/policies/dockerfile/dockerfile-disallow-apt/#install","title":"Install","text":"","tags":["dockerfile"]},{"location":"catalog/policies/dockerfile/dockerfile-disallow-apt/#in-cluster","title":"In cluster","text":"<pre><code>kubectl apply -f https://raw.githubusercontent.com/kyverno/kyverno-json/main/catalog/dockerfile/dockerfile-disallow-apt.yaml\n</code></pre>","tags":["dockerfile"]},{"location":"catalog/policies/dockerfile/dockerfile-disallow-apt/#download-locally","title":"Download locally","text":"<pre><code>curl -O https://raw.githubusercontent.com/kyverno/kyverno-json/main/catalog/dockerfile/dockerfile-disallow-apt.yaml\n</code></pre>","tags":["dockerfile"]},{"location":"catalog/policies/dockerfile/dockerfile-disallow-apt/#manifest","title":"Manifest","text":"<p>Original policy Raw</p> <pre><code>apiVersion: json.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  annotations:\n    description.policy.kyverno.io: This Policy ensures that apt isnt used but apt-get\n      can be used as apt interface is less stable than apt-get and so this preferred.\n    title.policy.kyverno.io: Ensure apt is not used in Dockerfile\n  creationTimestamp: null\n  labels:\n    dockerfile.tags.kyverno.io: dockerfile\n  name: dockerfile-disallow-apt\nspec:\n  rules:\n  - assert:\n      any:\n      - check:\n          ~.(Stages[].Commands[].CmdLine[]):\n            (contains(@, 'apt ')): false\n        message: apt not allowed\n    name: dockerfile-disallow-apt\n</code></pre>","tags":["dockerfile"]},{"location":"catalog/policies/dockerfile/dockerfile-disallow-last-user-root/","title":"Dockerfile last user is not allowed to be root","text":"","tags":["dockerfile"]},{"location":"catalog/policies/dockerfile/dockerfile-disallow-last-user-root/#description","title":"Description","text":"<p>This Policy ensures that last user in Dockerfile is not root.</p>","tags":["dockerfile"]},{"location":"catalog/policies/dockerfile/dockerfile-disallow-last-user-root/#install","title":"Install","text":"","tags":["dockerfile"]},{"location":"catalog/policies/dockerfile/dockerfile-disallow-last-user-root/#in-cluster","title":"In cluster","text":"<pre><code>kubectl apply -f https://raw.githubusercontent.com/kyverno/kyverno-json/main/catalog/dockerfile/dockerfile-disallow-last-user-root.yaml\n</code></pre>","tags":["dockerfile"]},{"location":"catalog/policies/dockerfile/dockerfile-disallow-last-user-root/#download-locally","title":"Download locally","text":"<pre><code>curl -O https://raw.githubusercontent.com/kyverno/kyverno-json/main/catalog/dockerfile/dockerfile-disallow-last-user-root.yaml\n</code></pre>","tags":["dockerfile"]},{"location":"catalog/policies/dockerfile/dockerfile-disallow-last-user-root/#manifest","title":"Manifest","text":"<p>Original policy Raw</p> <pre><code>apiVersion: json.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  annotations:\n    description.policy.kyverno.io: This Policy ensures that last user in Dockerfile\n      is not root.\n    title.policy.kyverno.io: Dockerfile last user is not allowed to be root\n  creationTimestamp: null\n  labels:\n    dockerfile.tags.kyverno.io: dockerfile\n  name: dockerfile-disallow-last-user-root\nspec:\n  rules:\n  - assert:\n      all:\n      - check:\n          ((Stages[].Commands[?Name == 'USER'][])[-1].User == 'root'): false\n        message: Last user root not allowed\n    name: check-disallow-last-user-root\n</code></pre>","tags":["dockerfile"]},{"location":"catalog/policies/dockerfile/dockerfile-disallow-sudo/","title":"Ensure sudo is not used in Dockerfile","text":"","tags":["dockerfile"]},{"location":"catalog/policies/dockerfile/dockerfile-disallow-sudo/#description","title":"Description","text":"<p>This Policy ensures that sudo isn\u2019t used.</p>","tags":["dockerfile"]},{"location":"catalog/policies/dockerfile/dockerfile-disallow-sudo/#install","title":"Install","text":"","tags":["dockerfile"]},{"location":"catalog/policies/dockerfile/dockerfile-disallow-sudo/#in-cluster","title":"In cluster","text":"<pre><code>kubectl apply -f https://raw.githubusercontent.com/kyverno/kyverno-json/main/catalog/dockerfile/dockerfile-disallow-sudo.yaml\n</code></pre>","tags":["dockerfile"]},{"location":"catalog/policies/dockerfile/dockerfile-disallow-sudo/#download-locally","title":"Download locally","text":"<pre><code>curl -O https://raw.githubusercontent.com/kyverno/kyverno-json/main/catalog/dockerfile/dockerfile-disallow-sudo.yaml\n</code></pre>","tags":["dockerfile"]},{"location":"catalog/policies/dockerfile/dockerfile-disallow-sudo/#manifest","title":"Manifest","text":"<p>Original policy Raw</p> <pre><code>apiVersion: json.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  annotations:\n    description.policy.kyverno.io: This Policy ensures that sudo isn\u2019t used.\n    title.policy.kyverno.io: Ensure sudo is not used in Dockerfile\n  creationTimestamp: null\n  labels:\n    dockerfile.tags.kyverno.io: dockerfile\n  name: dockerfile-disallow-sudo\nspec:\n  rules:\n  - assert:\n      all:\n      - check:\n          ~.(Stages[].Commands[].CmdLine[]):\n            (contains(@, 'sudo')): false\n        message: sudo not allowed\n    name: dockerfile-disallow-sudo\n</code></pre>","tags":["dockerfile"]},{"location":"catalog/policies/ecs/ecs-cluster-enable-logging/","title":"ECS cluster enable logging","text":"","tags":["aws","aws/ecs"]},{"location":"catalog/policies/ecs/ecs-cluster-enable-logging/#description","title":"Description","text":"<p>This Policy ensures that ECS clusters have logging enabled.</p>","tags":["aws","aws/ecs"]},{"location":"catalog/policies/ecs/ecs-cluster-enable-logging/#install","title":"Install","text":"","tags":["aws","aws/ecs"]},{"location":"catalog/policies/ecs/ecs-cluster-enable-logging/#in-cluster","title":"In cluster","text":"<pre><code>kubectl apply -f https://raw.githubusercontent.com/kyverno/kyverno-json/main/catalog/ecs/ecs-cluster-enable-logging.yaml\n</code></pre>","tags":["aws","aws/ecs"]},{"location":"catalog/policies/ecs/ecs-cluster-enable-logging/#download-locally","title":"Download locally","text":"<pre><code>curl -O https://raw.githubusercontent.com/kyverno/kyverno-json/main/catalog/ecs/ecs-cluster-enable-logging.yaml\n</code></pre>","tags":["aws","aws/ecs"]},{"location":"catalog/policies/ecs/ecs-cluster-enable-logging/#manifest","title":"Manifest","text":"<p>Original policy Raw</p> <pre><code>apiVersion: json.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  annotations:\n    description.policy.kyverno.io: This Policy ensures that ECS clusters have logging\n      enabled.\n    title.policy.kyverno.io: ECS cluster enable logging\n  creationTimestamp: null\n  labels:\n    ecs.aws.tags.kyverno.io: ecs-cluster\n  name: ecs-cluster-enable-logging\nspec:\n  rules:\n  - assert:\n      all:\n      - check:\n          values:\n            ~.configuration:\n              ~.execute_command_configuration:\n                (contains($forbidden_values, @.logging)): false\n        message: ECS Cluster should enable logging of ECS Exec\n    context:\n    - name: forbidden_values\n      variable:\n      - NONE\n    match:\n      any:\n      - type: aws_ecs_cluster\n    name: ecs-cluster-enable-logging\n</code></pre>","tags":["aws","aws/ecs"]},{"location":"catalog/policies/ecs/ecs-cluster-required-container-insights/","title":"ECS requires container insights","text":"","tags":["aws","aws/ecs"]},{"location":"catalog/policies/ecs/ecs-cluster-required-container-insights/#description","title":"Description","text":"<p>This Policy ensures that ECS clusters have container insights enabled.</p>","tags":["aws","aws/ecs"]},{"location":"catalog/policies/ecs/ecs-cluster-required-container-insights/#install","title":"Install","text":"","tags":["aws","aws/ecs"]},{"location":"catalog/policies/ecs/ecs-cluster-required-container-insights/#in-cluster","title":"In cluster","text":"<pre><code>kubectl apply -f https://raw.githubusercontent.com/kyverno/kyverno-json/main/catalog/ecs/ecs-cluster-required-container-insights.yaml\n</code></pre>","tags":["aws","aws/ecs"]},{"location":"catalog/policies/ecs/ecs-cluster-required-container-insights/#download-locally","title":"Download locally","text":"<pre><code>curl -O https://raw.githubusercontent.com/kyverno/kyverno-json/main/catalog/ecs/ecs-cluster-required-container-insights.yaml\n</code></pre>","tags":["aws","aws/ecs"]},{"location":"catalog/policies/ecs/ecs-cluster-required-container-insights/#manifest","title":"Manifest","text":"<p>Original policy Raw</p> <pre><code>apiVersion: json.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  annotations:\n    description.policy.kyverno.io: This Policy ensures that ECS clusters have container\n      insights enabled.\n    title.policy.kyverno.io: ECS requires container insights\n  creationTimestamp: null\n  labels:\n    ecs.aws.tags.kyverno.io: ecs-cluster\n  name: required-container-insights\nspec:\n  rules:\n  - assert:\n      all:\n      - check:\n          values:\n            ~.setting:\n              name: containerInsights\n              value: enabled\n        message: Container insights should be enabled on ECS cluster\n    match:\n      any:\n      - type: aws_ecs_cluster\n    name: required-container-insights\n</code></pre>","tags":["aws","aws/ecs"]},{"location":"catalog/policies/ecs/ecs-service-public-ip/","title":"ECS public IP","text":"","tags":["aws","aws/ecs"]},{"location":"catalog/policies/ecs/ecs-service-public-ip/#description","title":"Description","text":"<p>This Policy ensures that ECS services do not have public IP addresses assigned to them automatically.</p>","tags":["aws","aws/ecs"]},{"location":"catalog/policies/ecs/ecs-service-public-ip/#install","title":"Install","text":"","tags":["aws","aws/ecs"]},{"location":"catalog/policies/ecs/ecs-service-public-ip/#in-cluster","title":"In cluster","text":"<pre><code>kubectl apply -f https://raw.githubusercontent.com/kyverno/kyverno-json/main/catalog/ecs/ecs-service-public-ip.yaml\n</code></pre>","tags":["aws","aws/ecs"]},{"location":"catalog/policies/ecs/ecs-service-public-ip/#download-locally","title":"Download locally","text":"<pre><code>curl -O https://raw.githubusercontent.com/kyverno/kyverno-json/main/catalog/ecs/ecs-service-public-ip.yaml\n</code></pre>","tags":["aws","aws/ecs"]},{"location":"catalog/policies/ecs/ecs-service-public-ip/#manifest","title":"Manifest","text":"<p>Original policy Raw</p> <pre><code>apiVersion: json.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  annotations:\n    description.policy.kyverno.io: This Policy ensures that ECS services do not have\n      public IP addresses assigned to them automatically.\n    title.policy.kyverno.io: ECS public IP\n  creationTimestamp: null\n  labels:\n    ecs.aws.tags.kyverno.io: ecs-service\n  name: ecs-public-ip\nspec:\n  rules:\n  - assert:\n      all:\n      - check:\n          values:\n            ~.network_configuration:\n              (contains('$allowed-values', @.assign_public_ip)): false\n        message: ECS services should not have public IP addresses assigned to them\n          automatically\n    context:\n    - name: allowed-values\n      variable:\n      - false\n    match:\n      any:\n      - type: aws_ecs_service\n    name: ecs-public-ip\n</code></pre>","tags":["aws","aws/ecs"]},{"location":"catalog/policies/ecs/ecs-service-required-latest-platform-fargate/","title":"ECS require latest platform fargate","text":"","tags":["aws","aws/ecs"]},{"location":"catalog/policies/ecs/ecs-service-required-latest-platform-fargate/#description","title":"Description","text":"<p>This Policy ensures that ECS Fargate services runs on the latest Fargate platform version.</p>","tags":["aws","aws/ecs"]},{"location":"catalog/policies/ecs/ecs-service-required-latest-platform-fargate/#install","title":"Install","text":"","tags":["aws","aws/ecs"]},{"location":"catalog/policies/ecs/ecs-service-required-latest-platform-fargate/#in-cluster","title":"In cluster","text":"<pre><code>kubectl apply -f https://raw.githubusercontent.com/kyverno/kyverno-json/main/catalog/ecs/ecs-service-required-latest-platform-fargate.yaml\n</code></pre>","tags":["aws","aws/ecs"]},{"location":"catalog/policies/ecs/ecs-service-required-latest-platform-fargate/#download-locally","title":"Download locally","text":"<pre><code>curl -O https://raw.githubusercontent.com/kyverno/kyverno-json/main/catalog/ecs/ecs-service-required-latest-platform-fargate.yaml\n</code></pre>","tags":["aws","aws/ecs"]},{"location":"catalog/policies/ecs/ecs-service-required-latest-platform-fargate/#manifest","title":"Manifest","text":"<p>Original policy Raw</p> <pre><code>apiVersion: json.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  annotations:\n    description.policy.kyverno.io: This Policy ensures that ECS Fargate services runs\n      on the latest Fargate platform version.\n    title.policy.kyverno.io: ECS require latest platform fargate\n  creationTimestamp: null\n  labels:\n    ecs.aws.tags.kyverno.io: ecs-service\n  name: required-latest-platform-fargate\nspec:\n  rules:\n  - assert:\n      all:\n      - check:\n          values:\n            platform_version: LATEST\n        message: ECS Fargate services should run on the latest Fargate platform version\n    context:\n    - name: pv\n      variable: platform_version\n    match:\n      any:\n      - type: aws_ecs_service\n        values:\n          launch_type: FARGATE\n    name: required-latest-platform\n</code></pre>","tags":["aws","aws/ecs"]},{"location":"catalog/policies/ecs/ecs-task-definition-fs-read-only/","title":"ECS require filesystem read only","text":"","tags":["aws","aws/ecs"]},{"location":"catalog/policies/ecs/ecs-task-definition-fs-read-only/#description","title":"Description","text":"<p>This Policy ensures that ECS Fargate services runs on the latest Fargate platform version.</p>","tags":["aws","aws/ecs"]},{"location":"catalog/policies/ecs/ecs-task-definition-fs-read-only/#install","title":"Install","text":"","tags":["aws","aws/ecs"]},{"location":"catalog/policies/ecs/ecs-task-definition-fs-read-only/#in-cluster","title":"In cluster","text":"<pre><code>kubectl apply -f https://raw.githubusercontent.com/kyverno/kyverno-json/main/catalog/ecs/ecs-task-definition-fs-read-only.yaml\n</code></pre>","tags":["aws","aws/ecs"]},{"location":"catalog/policies/ecs/ecs-task-definition-fs-read-only/#download-locally","title":"Download locally","text":"<pre><code>curl -O https://raw.githubusercontent.com/kyverno/kyverno-json/main/catalog/ecs/ecs-task-definition-fs-read-only.yaml\n</code></pre>","tags":["aws","aws/ecs"]},{"location":"catalog/policies/ecs/ecs-task-definition-fs-read-only/#manifest","title":"Manifest","text":"<p>Original policy Raw</p> <pre><code>apiVersion: json.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  annotations:\n    description.policy.kyverno.io: This Policy ensures that ECS Fargate services runs\n      on the latest Fargate platform version.\n    title.policy.kyverno.io: ECS require filesystem read only\n  creationTimestamp: null\n  labels:\n    ecs.aws.tags.kyverno.io: ecs-task-definition\n  name: fs-read-only\nspec:\n  rules:\n  - assert:\n      any:\n      - check:\n          values:\n            ~.(json_parse(container_definitions)):\n              readonlyRootFilesystem: true\n        message: ECS containers should only have read-only access to root filesystems\n    match:\n      any:\n      - type: aws_ecs_task_definition\n    name: require-fs-read-only\n</code></pre>","tags":["aws","aws/ecs"]},{"location":"catalog/policies/ecs/policy-1/","title":"policy-1","text":""},{"location":"catalog/policies/ecs/policy-1/#description","title":"Description","text":"<p>None</p>"},{"location":"catalog/policies/ecs/policy-1/#install","title":"Install","text":""},{"location":"catalog/policies/ecs/policy-1/#in-cluster","title":"In cluster","text":"<pre><code>kubectl apply -f https://raw.githubusercontent.com/kyverno/kyverno-json/main/catalog/ecs/policy-1.yaml\n</code></pre>"},{"location":"catalog/policies/ecs/policy-1/#download-locally","title":"Download locally","text":"<pre><code>curl -O https://raw.githubusercontent.com/kyverno/kyverno-json/main/catalog/ecs/policy-1.yaml\n</code></pre>"},{"location":"catalog/policies/ecs/policy-1/#manifest","title":"Manifest","text":"<p>Original policy Raw</p> <pre><code>apiVersion: json.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  creationTimestamp: null\n  name: test\nspec:\n  rules:\n  - assert:\n      all:\n      - check:\n          foo:\n            /(bar)/: 10\n    name: foo-bar\n</code></pre>"},{"location":"cli/","title":"Overview","text":"<p>The <code>kyverno-json</code> Command Line Interface (CLI) can be used to:</p> <ul> <li>scan JSON or YAML files </li> <li>launch a web application with a REST API</li> <li>launch a playground </li> </ul> <p>Here is an example of scanning an Terraform plan that creates an S3 bucket:</p> <pre><code>./kyverno-json scan --policy test/commands/scan/tf-s3/policy.yaml --payload test/commands/scan/tf-s3/payload.json\n</code></pre> <p>The output looks like:</p> <pre><code>Loading policies ...\nLoading payload ...\nPre processing ...\nRunning ( evaluating 1 resource against 1 policy ) ...\n- s3 / check-tags /  FAILED: all[0].check.planned_values.root_module.~.resources[0].values.(keys(tags_all)).(contains(@, 'Team')): Invalid value: false: Expected value: true\nDone\n</code></pre>"},{"location":"cli/#installation","title":"Installation","text":"<p>See Install for the available options to install the CLI.</p>"},{"location":"cli/#pre-processing-payloads","title":"Pre-processing payloads","text":"<p>You can provide preprocessing queries in jmespath format to pre-process the input payload before evaluating resources against policies.</p> <p>This is necessary if the input payload is not what you want to directly analyze.</p> <p>For example, here is a partial JSON which was produced by converting a Terraform plan that creates an EC2 instance:</p> <p>kyverno/kyverno-json/main/test/commands/scan/tf-ec2/payload.json</p> <pre><code>{\n  \"format_version\": \"1.2\",\n  \"terraform_version\": \"1.5.7\",\n  \"planned_values\": {\n    \"root_module\": {\n      \"resources\": [\n        {\n          \"address\": \"aws_instance.app_server\",\n          \"mode\": \"managed\",\n          \"type\": \"aws_instance\",\n          \"name\": \"app_server\",\n          \"provider_name\": \"registry.terraform.io/hashicorp/aws\",\n          \"schema_version\": 1,\n          \"values\": {\n            \"ami\": \"ami-830c94e3\",\n            \"credit_specification\": [],\n            \"get_password_data\": false,\n            \"hibernation\": null,\n            \"instance_type\": \"t2.micro\",\n            \"launch_template\": [],\n            \"source_dest_check\": true,\n            \"tags\": {\n              \"Name\": \"ExampleAppServerInstance\"\n            },\n            \"tags_all\": {\n              \"Name\": \"ExampleAppServerInstance\"\n            },\n            \"timeouts\": null,\n            \"user_data_replace_on_change\": false,\n            \"volume_tags\": null\n          },\n\n          ...\n</code></pre> <p>To directly scan the <code>resources</code> element use <code>--pre-process planned_values.root_module.resources</code> as follows:</p> <pre><code>./kyverno-json scan --policy test/commands/scan/tf-ec2/policy.yaml --payload test/commands/scan/tf-ec2/payload.json --pre-process planned_values.root_module.resources\n</code></pre> <p>This command will produce the output:</p> <pre><code>Loading policies ...\nLoading payload ...\nPre processing ...\nRunning ( evaluating 1 resource against 1 policy ) ...\n- required-ec2-tags / require-team-tag /  PASSED\nDone\n</code></pre>"},{"location":"cli/commands/kyverno-json/","title":"Kyverno json","text":""},{"location":"cli/commands/kyverno-json/#kyverno-json","title":"kyverno-json","text":"<p>kyverno-json is a CLI tool to apply policies to json resources.</p>"},{"location":"cli/commands/kyverno-json/#synopsis","title":"Synopsis","text":"<p>kyverno-json is a CLI tool to apply policies to json resources.</p> <pre><code>kyverno-json [flags]\n</code></pre>"},{"location":"cli/commands/kyverno-json/#options","title":"Options","text":"<pre><code>  -h, --help   help for kyverno-json\n</code></pre>"},{"location":"cli/commands/kyverno-json/#see-also","title":"SEE ALSO","text":"<ul> <li>kyverno-json completion  - Generate the autocompletion script for the specified shell</li> <li>kyverno-json docs  - Generates reference documentation.</li> <li>kyverno-json jp  - Provides a command-line interface to JMESPath, enhanced with custom functions.</li> <li>kyverno-json playground  - playground</li> <li>kyverno-json scan  - scan</li> <li>kyverno-json serve    - serve</li> <li>kyverno-json version    - Print the version informations</li> </ul>"},{"location":"cli/commands/kyverno-json_completion/","title":"Kyverno json completion","text":""},{"location":"cli/commands/kyverno-json_completion/#kyverno-json-completion","title":"kyverno-json completion","text":"<p>Generate the autocompletion script for the specified shell</p>"},{"location":"cli/commands/kyverno-json_completion/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for kyverno-json for the specified shell. See each sub-command's help for details on how to use the generated script.</p>"},{"location":"cli/commands/kyverno-json_completion/#options","title":"Options","text":"<pre><code>  -h, --help   help for completion\n</code></pre>"},{"location":"cli/commands/kyverno-json_completion/#see-also","title":"SEE ALSO","text":"<ul> <li>kyverno-json    - kyverno-json is a CLI tool to apply policies to json resources.</li> <li>kyverno-json completion bash    - Generate the autocompletion script for bash</li> <li>kyverno-json completion fish    - Generate the autocompletion script for fish</li> <li>kyverno-json completion powershell    - Generate the autocompletion script for powershell</li> <li>kyverno-json completion zsh  - Generate the autocompletion script for zsh</li> </ul>"},{"location":"cli/commands/kyverno-json_completion_bash/","title":"Kyverno json completion bash","text":""},{"location":"cli/commands/kyverno-json_completion_bash/#kyverno-json-completion-bash","title":"kyverno-json completion bash","text":"<p>Generate the autocompletion script for bash</p>"},{"location":"cli/commands/kyverno-json_completion_bash/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for the bash shell.</p> <p>This script depends on the 'bash-completion' package. If it is not installed already, you can install it via your OS's package manager.</p> <p>To load completions in your current shell session:</p> <pre><code>source &lt;(kyverno-json completion bash)\n</code></pre> <p>To load completions for every new session, execute once:</p>"},{"location":"cli/commands/kyverno-json_completion_bash/#linux","title":"Linux:","text":"<pre><code>kyverno-json completion bash &gt; /etc/bash_completion.d/kyverno-json\n</code></pre>"},{"location":"cli/commands/kyverno-json_completion_bash/#macos","title":"macOS:","text":"<pre><code>kyverno-json completion bash &gt; $(brew --prefix)/etc/bash_completion.d/kyverno-json\n</code></pre> <p>You will need to start a new shell for this setup to take effect.</p> <pre><code>kyverno-json completion bash\n</code></pre>"},{"location":"cli/commands/kyverno-json_completion_bash/#options","title":"Options","text":"<pre><code>  -h, --help              help for bash\n      --no-descriptions   disable completion descriptions\n</code></pre>"},{"location":"cli/commands/kyverno-json_completion_bash/#see-also","title":"SEE ALSO","text":"<ul> <li>kyverno-json completion  - Generate the autocompletion script for the specified shell</li> </ul>"},{"location":"cli/commands/kyverno-json_completion_fish/","title":"Kyverno json completion fish","text":""},{"location":"cli/commands/kyverno-json_completion_fish/#kyverno-json-completion-fish","title":"kyverno-json completion fish","text":"<p>Generate the autocompletion script for fish</p>"},{"location":"cli/commands/kyverno-json_completion_fish/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for the fish shell.</p> <p>To load completions in your current shell session:</p> <pre><code>kyverno-json completion fish | source\n</code></pre> <p>To load completions for every new session, execute once:</p> <pre><code>kyverno-json completion fish &gt; ~/.config/fish/completions/kyverno-json.fish\n</code></pre> <p>You will need to start a new shell for this setup to take effect.</p> <pre><code>kyverno-json completion fish [flags]\n</code></pre>"},{"location":"cli/commands/kyverno-json_completion_fish/#options","title":"Options","text":"<pre><code>  -h, --help              help for fish\n      --no-descriptions   disable completion descriptions\n</code></pre>"},{"location":"cli/commands/kyverno-json_completion_fish/#see-also","title":"SEE ALSO","text":"<ul> <li>kyverno-json completion  - Generate the autocompletion script for the specified shell</li> </ul>"},{"location":"cli/commands/kyverno-json_completion_powershell/","title":"Kyverno json completion powershell","text":""},{"location":"cli/commands/kyverno-json_completion_powershell/#kyverno-json-completion-powershell","title":"kyverno-json completion powershell","text":"<p>Generate the autocompletion script for powershell</p>"},{"location":"cli/commands/kyverno-json_completion_powershell/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for powershell.</p> <p>To load completions in your current shell session:</p> <pre><code>kyverno-json completion powershell | Out-String | Invoke-Expression\n</code></pre> <p>To load completions for every new session, add the output of the above command to your powershell profile.</p> <pre><code>kyverno-json completion powershell [flags]\n</code></pre>"},{"location":"cli/commands/kyverno-json_completion_powershell/#options","title":"Options","text":"<pre><code>  -h, --help              help for powershell\n      --no-descriptions   disable completion descriptions\n</code></pre>"},{"location":"cli/commands/kyverno-json_completion_powershell/#see-also","title":"SEE ALSO","text":"<ul> <li>kyverno-json completion  - Generate the autocompletion script for the specified shell</li> </ul>"},{"location":"cli/commands/kyverno-json_completion_zsh/","title":"Kyverno json completion zsh","text":""},{"location":"cli/commands/kyverno-json_completion_zsh/#kyverno-json-completion-zsh","title":"kyverno-json completion zsh","text":"<p>Generate the autocompletion script for zsh</p>"},{"location":"cli/commands/kyverno-json_completion_zsh/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for the zsh shell.</p> <p>If shell completion is not already enabled in your environment you will need to enable it.  You can execute the following once:</p> <pre><code>echo \"autoload -U compinit; compinit\" &gt;&gt; ~/.zshrc\n</code></pre> <p>To load completions in your current shell session:</p> <pre><code>source &lt;(kyverno-json completion zsh)\n</code></pre> <p>To load completions for every new session, execute once:</p>"},{"location":"cli/commands/kyverno-json_completion_zsh/#linux","title":"Linux:","text":"<pre><code>kyverno-json completion zsh &gt; \"${fpath[1]}/_kyverno-json\"\n</code></pre>"},{"location":"cli/commands/kyverno-json_completion_zsh/#macos","title":"macOS:","text":"<pre><code>kyverno-json completion zsh &gt; $(brew --prefix)/share/zsh/site-functions/_kyverno-json\n</code></pre> <p>You will need to start a new shell for this setup to take effect.</p> <pre><code>kyverno-json completion zsh [flags]\n</code></pre>"},{"location":"cli/commands/kyverno-json_completion_zsh/#options","title":"Options","text":"<pre><code>  -h, --help              help for zsh\n      --no-descriptions   disable completion descriptions\n</code></pre>"},{"location":"cli/commands/kyverno-json_completion_zsh/#see-also","title":"SEE ALSO","text":"<ul> <li>kyverno-json completion  - Generate the autocompletion script for the specified shell</li> </ul>"},{"location":"cli/commands/kyverno-json_docs/","title":"Kyverno json docs","text":""},{"location":"cli/commands/kyverno-json_docs/#kyverno-json-docs","title":"kyverno-json docs","text":"<p>Generates reference documentation.</p>"},{"location":"cli/commands/kyverno-json_docs/#synopsis","title":"Synopsis","text":"<p>Generates reference documentation.</p> <p>The docs command generates CLI reference documentation. It can be used to generate simple markdown files or markdown to be used for the website.</p> <pre><code>kyverno-json docs [flags]\n</code></pre>"},{"location":"cli/commands/kyverno-json_docs/#examples","title":"Examples","text":"<pre><code>  # Generate simple markdown documentation\n  kyverno-json docs -o . --autogenTag=false\n\n  # Generate website documentation\n  kyverno-json docs -o . --website\n</code></pre>"},{"location":"cli/commands/kyverno-json_docs/#options","title":"Options","text":"<pre><code>      --autogenTag      Determines if the generated docs should contain a timestamp (default true)\n  -h, --help            help for docs\n  -o, --output string   Output path (default \".\")\n      --website         Website version\n</code></pre>"},{"location":"cli/commands/kyverno-json_docs/#see-also","title":"SEE ALSO","text":"<ul> <li>kyverno-json    - kyverno-json is a CLI tool to apply policies to json resources.</li> </ul>"},{"location":"cli/commands/kyverno-json_jp/","title":"Kyverno json jp","text":""},{"location":"cli/commands/kyverno-json_jp/#kyverno-json-jp","title":"kyverno-json jp","text":"<p>Provides a command-line interface to JMESPath, enhanced with custom functions.</p>"},{"location":"cli/commands/kyverno-json_jp/#synopsis","title":"Synopsis","text":"<p>Provides a command-line interface to JMESPath, enhanced with custom functions.</p> <pre><code>kyverno-json jp [flags]\n</code></pre>"},{"location":"cli/commands/kyverno-json_jp/#examples","title":"Examples","text":"<pre><code>  # List functions\n  kyverno-json jp function\n\n  # Evaluate query\n  kyverno-json jp query -i object.yaml 'request.object.metadata.name | truncate(@, `9`)'\n\n  # Parse expression\n  kyverno-json jp parse 'request.object.metadata.name | truncate(@, `9`)'\n</code></pre>"},{"location":"cli/commands/kyverno-json_jp/#options","title":"Options","text":"<pre><code>  -h, --help   help for jp\n</code></pre>"},{"location":"cli/commands/kyverno-json_jp/#see-also","title":"SEE ALSO","text":"<ul> <li>kyverno-json    - kyverno-json is a CLI tool to apply policies to json resources.</li> <li>kyverno-json jp function    - Provides function informations.</li> <li>kyverno-json jp parse  - Parses jmespath expression and prints corresponding AST.</li> <li>kyverno-json jp query  - Provides a command-line interface to JMESPath, enhanced with Kyverno specific custom functions.</li> </ul>"},{"location":"cli/commands/kyverno-json_jp_function/","title":"Kyverno json jp function","text":""},{"location":"cli/commands/kyverno-json_jp_function/#kyverno-json-jp-function","title":"kyverno-json jp function","text":"<p>Provides function informations.</p>"},{"location":"cli/commands/kyverno-json_jp_function/#synopsis","title":"Synopsis","text":"<p>Provides function informations.</p> <pre><code>kyverno-json jp function [function_name]... [flags]\n</code></pre>"},{"location":"cli/commands/kyverno-json_jp_function/#examples","title":"Examples","text":"<pre><code>  # List functions\n  kyverno-json jp function\n\n  # Get function infos\n  kyverno-json jp function truncate\n</code></pre>"},{"location":"cli/commands/kyverno-json_jp_function/#options","title":"Options","text":"<pre><code>  -h, --help   help for function\n</code></pre>"},{"location":"cli/commands/kyverno-json_jp_function/#see-also","title":"SEE ALSO","text":"<ul> <li>kyverno-json jp  - Provides a command-line interface to JMESPath, enhanced with custom functions.</li> </ul>"},{"location":"cli/commands/kyverno-json_jp_parse/","title":"Kyverno json jp parse","text":""},{"location":"cli/commands/kyverno-json_jp_parse/#kyverno-json-jp-parse","title":"kyverno-json jp parse","text":"<p>Parses jmespath expression and prints corresponding AST.</p>"},{"location":"cli/commands/kyverno-json_jp_parse/#synopsis","title":"Synopsis","text":"<p>Parses jmespath expression and prints corresponding AST.</p> <pre><code>kyverno-json jp parse [-f file|expression]... [flags]\n</code></pre>"},{"location":"cli/commands/kyverno-json_jp_parse/#examples","title":"Examples","text":"<pre><code>  # Parse expression\n  kyverno-json jp parse 'request.object.metadata.name | truncate(@, `9`)'\n\n  # Parse expression from a file\n  kyverno-json jp parse -f my-file\n\n  # Parse expression from stdin\n  kyverno-json jp parse\n\n  # Parse multiple expressionxs\n  kyverno-json jp parse -f my-file1 -f my-file-2 'request.object.metadata.name | truncate(@, `9`)'\n</code></pre>"},{"location":"cli/commands/kyverno-json_jp_parse/#options","title":"Options","text":"<pre><code>  -f, --file strings   Read input from a JSON or YAML file instead of stdin\n  -h, --help           help for parse\n</code></pre>"},{"location":"cli/commands/kyverno-json_jp_parse/#see-also","title":"SEE ALSO","text":"<ul> <li>kyverno-json jp  - Provides a command-line interface to JMESPath, enhanced with custom functions.</li> </ul>"},{"location":"cli/commands/kyverno-json_jp_query/","title":"Kyverno json jp query","text":""},{"location":"cli/commands/kyverno-json_jp_query/#kyverno-json-jp-query","title":"kyverno-json jp query","text":"<p>Provides a command-line interface to JMESPath, enhanced with Kyverno specific custom functions.</p>"},{"location":"cli/commands/kyverno-json_jp_query/#synopsis","title":"Synopsis","text":"<p>Provides a command-line interface to JMESPath, enhanced with Kyverno specific custom functions.</p> <pre><code>kyverno-json jp query [-i input] [-q query|query]... [flags]\n</code></pre>"},{"location":"cli/commands/kyverno-json_jp_query/#examples","title":"Examples","text":"<pre><code>  # Evaluate query\n  kyverno-json jp query -i object.yaml 'request.object.metadata.name | truncate(@, `9`)'\n\n  # Evaluate query\n  kyverno-json jp query -i object.yaml -q query-file\n\n  # Evaluate multiple queries\n  kyverno-json jp query -i object.yaml -q query-file-1 -q query-file-2 'request.object.metadata.name | truncate(@, `9`)'\n</code></pre>"},{"location":"cli/commands/kyverno-json_jp_query/#options","title":"Options","text":"<pre><code>  -c, --compact         Produce compact JSON output that omits non essential whitespace\n  -h, --help            help for query\n  -i, --input string    Read input from a JSON or YAML file instead of stdin\n  -q, --query strings   Read JMESPath expression from the specified file\n  -u, --unquoted        If the final result is a string, it will be printed without quotes\n</code></pre>"},{"location":"cli/commands/kyverno-json_jp_query/#see-also","title":"SEE ALSO","text":"<ul> <li>kyverno-json jp  - Provides a command-line interface to JMESPath, enhanced with custom functions.</li> </ul>"},{"location":"cli/commands/kyverno-json_playground/","title":"Kyverno json playground","text":""},{"location":"cli/commands/kyverno-json_playground/#kyverno-json-playground","title":"kyverno-json playground","text":"<p>playground</p>"},{"location":"cli/commands/kyverno-json_playground/#synopsis","title":"Synopsis","text":"<p>Serve playground</p> <pre><code>kyverno-json playground [flags]\n</code></pre>"},{"location":"cli/commands/kyverno-json_playground/#options","title":"Options","text":"<pre><code>      --gin-cors                enable gin cors (default true)\n      --gin-log                 enable gin logger (default true)\n      --gin-max-body-size int   gin max body size (default 2097152)\n      --gin-mode string         gin run mode (default \"release\")\n  -h, --help                    help for playground\n      --server-host string      server host (default \"0.0.0.0\")\n      --server-port int         server port (default 8080)\n</code></pre>"},{"location":"cli/commands/kyverno-json_playground/#see-also","title":"SEE ALSO","text":"<ul> <li>kyverno-json    - kyverno-json is a CLI tool to apply policies to json resources.</li> </ul>"},{"location":"cli/commands/kyverno-json_scan/","title":"Kyverno json scan","text":""},{"location":"cli/commands/kyverno-json_scan/#kyverno-json-scan","title":"kyverno-json scan","text":"<p>scan</p>"},{"location":"cli/commands/kyverno-json_scan/#synopsis","title":"Synopsis","text":"<p>Apply policies to json resources</p> <pre><code>kyverno-json scan [flags]\n</code></pre>"},{"location":"cli/commands/kyverno-json_scan/#options","title":"Options","text":"<pre><code>      --bindings string       Bindings file (json or yaml file). Top level keys will be interpreted as bindings names.\n  -h, --help                  help for scan\n      --labels strings        Labels selectors for policies\n      --output string         Output format (text or json) (default \"text\")\n      --payload string        Path to payload (json or yaml file)\n      --policy strings        Path to kyverno-json policies\n      --pre-process strings   JMESPath expression used to pre process payload\n</code></pre>"},{"location":"cli/commands/kyverno-json_scan/#see-also","title":"SEE ALSO","text":"<ul> <li>kyverno-json    - kyverno-json is a CLI tool to apply policies to json resources.</li> </ul>"},{"location":"cli/commands/kyverno-json_serve/","title":"Kyverno json serve","text":""},{"location":"cli/commands/kyverno-json_serve/#kyverno-json-serve","title":"kyverno-json serve","text":"<p>serve</p>"},{"location":"cli/commands/kyverno-json_serve/#synopsis","title":"Synopsis","text":"<p>Serve API</p> <pre><code>kyverno-json serve [flags]\n</code></pre>"},{"location":"cli/commands/kyverno-json_serve/#options","title":"Options","text":"<pre><code>      --gin-cors                            enable gin cors (default true)\n      --gin-log                             enable gin logger (default true)\n      --gin-max-body-size int               gin max body size (default 2097152)\n      --gin-mode string                     gin run mode (default \"release\")\n  -h, --help                                help for serve\n      --kube-as string                      Username to impersonate for the operation\n      --kube-as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-uid string                  UID to impersonate for the operation\n      --kube-certificate-authority string   Path to a cert file for the certificate authority\n      --kube-client-certificate string      Path to a client certificate file for TLS\n      --kube-client-key string              Path to a client key file for TLS\n      --kube-cluster string                 The name of the kubeconfig cluster to use\n      --kube-context string                 The name of the kubeconfig context to use\n      --kube-disable-compression            If true, opt-out of response compression for all requests to the server\n      --kube-insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n  -n, --kube-namespace string               If present, the namespace scope for this CLI request\n      --kube-password string                Password for basic authentication to the API server\n      --kube-proxy-url string               If provided, this URL will be used to connect via proxy\n      --kube-request-timeout string         The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --kube-server string                  The address and port of the Kubernetes API server\n      --kube-tls-server-name string         If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --kube-token string                   Bearer token for authentication to the API server\n      --kube-user string                    The name of the kubeconfig user to use\n      --kube-username string                Username for basic authentication to the API server\n      --server-host string                  server host (default \"0.0.0.0\")\n      --server-port int                     server port (default 8080)\n</code></pre>"},{"location":"cli/commands/kyverno-json_serve/#see-also","title":"SEE ALSO","text":"<ul> <li>kyverno-json    - kyverno-json is a CLI tool to apply policies to json resources.</li> </ul>"},{"location":"cli/commands/kyverno-json_version/","title":"Kyverno json version","text":""},{"location":"cli/commands/kyverno-json_version/#kyverno-json-version","title":"kyverno-json version","text":"<p>Print the version informations</p>"},{"location":"cli/commands/kyverno-json_version/#synopsis","title":"Synopsis","text":"<p>Print the version informations</p> <pre><code>kyverno-json version [flags]\n</code></pre>"},{"location":"cli/commands/kyverno-json_version/#examples","title":"Examples","text":"<pre><code>  # Print version infos\n  kyverno-json version\n</code></pre>"},{"location":"cli/commands/kyverno-json_version/#options","title":"Options","text":"<pre><code>  -h, --help   help for version\n</code></pre>"},{"location":"cli/commands/kyverno-json_version/#see-also","title":"SEE ALSO","text":"<ul> <li>kyverno-json    - kyverno-json is a CLI tool to apply policies to json resources.</li> </ul>"},{"location":"go-library/","title":"Usage","text":"<p>The Go API provides a way to embed the Kyverno JSON engine in Go programs that validate JSON payloads using Kyverno policies.</p> <p>The Go API can be added to a program's dependencies as follows:</p> <pre><code>go get github.com/kyverno/kyverno-json/pkg/jsonengine\ngo get github.com/kyverno/kyverno-json/pkg/policy\n</code></pre> <p>Here is a sample program that shows the overall flow for programatically using the Kyverno JSON Engine:</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"encoding/json\"\n    \"log\"\n\n    jsonengine \"github.com/kyverno/kyverno-json/pkg/json-engine\"\n    \"github.com/kyverno/kyverno-json/pkg/policy\"\n)\n\nconst policyYAML = `\napiVersion: json.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: authz\nspec:\n  rules:\n  - name: delete-checks\n    identifier: \"name\"\n    match:\n      all:\n        (input.method): \"DELETE\"\n    assert:\n      all:\n      - check:\n          role: \"admin\"\n`\n\nfunc main() {\n    policies, err := policy.Parse([]byte(policyYAML))\n    if err != nil {\n        panic(err)\n    }\n\n    // load payloads\n    requestJSON := `{\n        \"name\": \"Annie\",\n        \"role\": \"admin\",\n        \"input\": {\n            \"method\": \"DELETE\",\n            \"path\":   \"/red-files\"\n        }\n    }`\n\n    var payload any\n    if err := json.Unmarshal([]byte(requestJSON), &amp;payload); err != nil {\n        panic(err)\n    }\n\n    // create a JsonEngineRequest\n    request := jsonengine.JsonEngineRequest{\n        Resources: []any{payload},\n        Policies:  policies,\n    }\n\n    // create a new json engine\n    engine := jsonengine.New()\n\n    responses := engine.Run(context.Background(), request)\n\n    logger := log.Default()\n    for _, resp := range responses {\n        if resp.Error != nil {\n            // ...handle execution error\n            logger.Printf(\"policy error: %v\", resp.Error)\n        }\n\n        if resp.Failure != nil {\n            // ...handle policy failure\n            logger.Printf(\"policy failure: %v\", resp.Failure)\n        }\n    }\n}\n</code></pre>"},{"location":"jp/functions/","title":"Functions","text":""},{"location":"jp/functions/#built-in-functions","title":"built-in functions","text":"Name Signature abs <code>abs(number)</code> avg <code>avg(array[number])</code> ceil <code>ceil(number)</code> contains <code>contains(array\\|string, any)</code> ends_with <code>ends_with(string, string)</code> find_first <code>find_first(string, string, number, number)</code> find_last <code>find_last(string, string, number, number)</code> floor <code>floor(number)</code> from_items <code>from_items(array[array])</code> group_by <code>group_by(array, expref)</code> items <code>items(object)</code> join <code>join(string, array[string])</code> keys <code>keys(object)</code> length <code>length(string\\|array\\|object)</code> lower <code>lower(string)</code> map <code>map(expref, array)</code> max <code>max(array[number]\\|array[string])</code> max_by <code>max_by(array, expref)</code> merge <code>merge(object)</code> min <code>min(array[number]\\|array[string])</code> min_by <code>min_by(array, expref)</code> not_null <code>not_null(any)</code> pad_left <code>pad_left(string, number, string)</code> pad_right <code>pad_right(string, number, string)</code> replace <code>replace(string, string, string, number)</code> reverse <code>reverse(array\\|string)</code> sort <code>sort(array[string]\\|array[number])</code> sort_by <code>sort_by(array, expref)</code> split <code>split(string, string, number)</code> starts_with <code>starts_with(string, string)</code> sum <code>sum(array[number])</code> to_array <code>to_array(any)</code> to_number <code>to_number(any)</code> to_string <code>to_string(any)</code> trim <code>trim(string, string)</code> trim_left <code>trim_left(string, string)</code> trim_right <code>trim_right(string, string)</code> type <code>type(any)</code> upper <code>upper(string)</code> values <code>values(object)</code> zip <code>zip(array, array)</code>"},{"location":"jp/functions/#custom-functions","title":"custom functions","text":"Name Signature at <code>at(array, any)</code> concat <code>concat(string, string)</code> json_parse <code>json_parse(string)</code> wildcard <code>wildcard(string, string)</code>"},{"location":"jp/functions/#kyverno-functions","title":"kyverno functions","text":"Name Signature compare <code>compare(string, string)</code> equal_fold <code>equal_fold(string, string)</code> replace <code>replace(string, string, string, number)</code> replace_all <code>replace_all(string, string, string)</code> to_upper <code>to_upper(string)</code> to_lower <code>to_lower(string)</code> trim <code>trim(string, string)</code> trim_prefix <code>trim_prefix(string, string)</code> split <code>split(string, string)</code> regex_replace_all <code>regex_replace_all(string, string\\|number, string\\|number)</code> regex_replace_all_literal <code>regex_replace_all_literal(string, string\\|number, string\\|number)</code> regex_match <code>regex_match(string, string\\|number)</code> pattern_match <code>pattern_match(string, string\\|number)</code> label_match <code>label_match(object, object)</code> to_boolean <code>to_boolean(string)</code> add <code>add(any, any)</code> sum <code>sum(array)</code> subtract <code>subtract(any, any)</code> multiply <code>multiply(any, any)</code> divide <code>divide(any, any)</code> modulo <code>modulo(any, any)</code> round <code>round(number, number)</code> base64_decode <code>base64_decode(string)</code> base64_encode <code>base64_encode(string)</code> time_since <code>time_since(string, string, string)</code> time_now <code>time_now()</code> time_now_utc <code>time_now_utc()</code> path_canonicalize <code>path_canonicalize(string)</code> truncate <code>truncate(string, number)</code> semver_compare <code>semver_compare(string, string)</code> parse_json <code>parse_json(string)</code> parse_yaml <code>parse_yaml(string)</code> lookup <code>lookup(object\\|array, string\\|number)</code> items <code>items(object\\|array, string, string)</code> object_from_lists <code>object_from_lists(array, array)</code> random <code>random(string)</code> x509_decode <code>x509_decode(string)</code> time_to_cron <code>time_to_cron(string)</code> time_add <code>time_add(string, string)</code> time_parse <code>time_parse(string, string)</code> time_utc <code>time_utc(string)</code> time_diff <code>time_diff(string, string)</code> time_before <code>time_before(string, string)</code> time_after <code>time_after(string, string)</code> time_between <code>time_between(string, string, string)</code> time_truncate <code>time_truncate(string, string)</code>"},{"location":"policies/asserts/","title":"Assertion trees","text":"<p>Assertion trees can be used to apply complex and dynamic conditional checks using JMESPath expressions.</p>"},{"location":"policies/asserts/#assert","title":"Assert","text":"<p>An <code>assert</code> declaration contains an <code>any</code> or <code>all</code> list in which each entry contains a:</p> <ul> <li><code>check</code>: the assertion check</li> <li><code>message</code>: an optional message</li> </ul> <p>A check can contain one or more JMESPath expressions. Expressions represent projections of selected data in the JSON payload and the result of this projection is passed to descendants for further analysis.</p> <p>All comparisons happen in the leaves of the assertion tree.</p> <p>A simple example:</p> <p>This policy checks that a pod does not use the default service account:</p> <pre><code>apiVersion: json.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: assert-sample\nspec:\n  rules:\n    - name: foo-bar\n      match:\n        all:\n        - apiVersion: v1\n          kind: Pod\n      assert:\n        all:\n        - message: \"serviceAccountName 'default' is not allowed\"\n          check:\n            spec:\n              (serviceAccountName == 'default'): false\n</code></pre> <p>A detailed example:</p> <p>Given the input payload below:</p> <pre><code>foo:\n  baz: true\n  bar: 4\n  bat: 6\n</code></pre> <p>It is possible to write a validation rule like this:</p> <pre><code>apiVersion: json.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: test\nspec:\n  rules:\n    - name: foo-bar-4\n      validate:\n        assert:\n          all:\n          - message: \"...\"\n            check:\n              # project field `foo` onto itself, the content of `foo` becomes the current object for descendants\n              foo:\n\n                # evaluate expression `(bar &gt; `3`)`, the boolean result becomes the current object for descendants\n                # the `true` leaf is compared with the current value `true`\n                (bar &gt; `3`): true\n\n                # evaluate expression `(!baz)`, the boolean result becomes the current object for descendants\n                # the leaf `false` is compared with the current value `false`\n                (!baz): false\n\n                # evaluate expression `(bar + bat)`, the numeric result becomes the current object for descendants\n                # the leaf `10` is compared with the current value `10`\n                (bar + bat): 10\n</code></pre>"},{"location":"policies/asserts/#iterating-with-projection-modifiers","title":"Iterating with Projection Modifiers","text":"<p>Assertion tree expressions support modifiers to influence the way projected values are processed.</p> <p>The <code>~</code> modifier applies to arrays and maps, it mean the input array or map elements will be processed individually by descendants.</p> <p>When the <code>~</code> modifier is not used, descendants receive the whole array, not each individual element.</p> <p>Consider the following input document:</p> <pre><code>foo:\n  bar:\n  - 1\n  - 2\n  - 3\n</code></pre> <p>The policy below does not use the <code>~</code> modifier and <code>foo.bar</code> array is compared against the expected array:</p> <pre><code>apiVersion: json.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: test\nspec:\n  rules:\n    - name: foo-bar\n      validate:\n        assert:\n          all:\n          - foo:\n              # the content of the `bar` field will be compared against `[1, 2, 3]`\n              bar:\n              - 1\n              - 2\n              - 3\n</code></pre> <p>With the <code>~</code> modifier, we can apply descendant assertions to all elements in the array individually. The policy below ensures that all elements in the input array are <code>&lt; 5</code>:</p> <pre><code>apiVersion: json.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: test\nspec:\n  rules:\n    - name: foo-bar\n      validate:\n        assert:\n          all:\n          - foo:\n              # with the `~` modifier all elements in the `[1, 2, 3]` array are processed individually and passed to descendants\n              ~.bar:\n                # the expression `(@ &lt; `5`)` is evaluated for every element and the result is expected to be `true`\n                (@ &lt; `5`): true\n</code></pre> <p>The <code>~</code> modifier supports binding the index of the element being processed to a named binding with the following syntax <code>~index_name.bar</code>. When this is used, we can access the element index in descendants with <code>$index_name</code>.</p> <p>When used with a map, the named binding receives the key of the element being processed.</p>"},{"location":"policies/asserts/#explicit-bindings","title":"Explicit bindings","text":"<p>Sometimes it can be useful to refer to a parent node in the assertion tree.</p> <p>This is possible to add an explicit binding at every node in the tree by appending the <code>-&gt;binding_name</code> to the key.</p> <p>Given the input document:</p> <pre><code>foo:\n  bar: 4\n  bat: 6\n</code></pre> <p>The following policy will compute a sum and bind the result to the <code>sum</code> binding. A descendant can then use <code>$sum</code> and use it:</p> <pre><code>apiVersion: json.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: test\nspec:\n  rules:\n    - name: foo-bar\n      validate:\n        assert:\n          all:\n          - foo:\n              # evaluate expression `(bar + bat)` and bind it to `sum`\n              (bar + bat)-&gt;sum:\n                # get the `$sum` binding and compare it against `10`\n                ($sum): 10\n</code></pre> <p>All binding are available to descendants, if a descendant creates a binding with a name that already exists the binding will be overridden for descendants only and it doesn't affect the bindings at upper levels in the tree.</p> <p>In other words, a node in the tree always sees bindings that are defined in the parents and if a name is reused, the first binding with the given name wins when winding up the tree.</p> <p>As a consequence, the policy below will evaluate to true:</p> <pre><code>apiVersion: json.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: test\nspec:\n  rules:\n    - name: foo-bar\n      validate:\n        assert:\n          all:\n          - foo:\n              (bar + bat)-&gt;sum:\n                ($sum + $sum)-&gt;sum:\n                  ($sum): 20\n                ($sum): 10\n</code></pre> <p>Finally, we can always access the current payload, policy and rule being evaluated using the built-in <code>$payload</code>, <code>$policy</code> and <code>$rule</code> bindings. No protection is made to prevent you from overriding those bindings though.</p>"},{"location":"policies/asserts/#escaping-projection","title":"Escaping projection","text":"<p>It can be necessary to prevent a projection under certain circumstances.</p> <p>Consider the following document:</p> <pre><code>foo:\n  (bar): 4\n  (baz):\n  - 1\n  - 2\n  - 3\n</code></pre> <p>Here the <code>(bar)</code> key conflict with the projection syntax. To workaround this situation, you can escape a projection by surrounding it with <code>\\</code> characters like this:</p> <pre><code>apiVersion: json.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: test\nspec:\n  rules:\n    - name: foo-bar\n      validate:\n        assert:\n          all:\n          - foo:\n              \\(bar)\\: 10\n</code></pre> <p>In this case, the leading and trailing <code>\\</code> characters will be erased and the projection won't be applied.</p> <p>Note that it's still possible to use the <code>~</code> modifier or to create a named binding with and escaped projection.</p> <p>Keys like this are perfectly valid:</p> <ul> <li><code>~index.\\baz\\</code></li> <li><code>\\baz\\@foo</code></li> <li><code>~index.\\baz\\@foo</code></li> </ul>"},{"location":"policies/policies/","title":"Policy Structure","text":"<p>Kyverno policies are Kubernetes resources and can be easily managed via Kubernetes APIs, GitOps workflows, and other existing tools.</p> <p>Policies that apply to JSON payload have a few differences from Kyverno policies that are applied to Kubernetes resources at admission controls.</p>"},{"location":"policies/policies/#resource-scope","title":"Resource Scope","text":"<p>Policies that apply to JSON payloads are always cluster-wide resources.</p>"},{"location":"policies/policies/#api-group-and-kind","title":"API Group and Kind","text":"<p><code>kyverno-json</code> policies belong to the <code>json.kyverno.io</code> group and can only be of kind <code>ValidatingPolicy</code>.</p> <pre><code>apiVersion: json.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: test\nspec:\n  rules:\n    - name: foo-bar-4\n      validate:\n        assert:\n          all:\n          - foo:\n              bar: 4\n</code></pre>"},{"location":"policies/policies/#policy-rules","title":"Policy Rules","text":"<p>A policy can have multiple rules, and rules are processed in order. Evaluation stops at the first rule that fails.</p>"},{"location":"policies/policies/#match-and-exclude","title":"Match and Exclude","text":"<p>Policies that apply to JSON payloads use assertion trees in both the <code>match</code>/<code>exclude</code> declarations as well as the <code>validate</code> rule declaration.</p> <pre><code>apiVersion: json.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: required-s3-tags\nspec:\n  rules:\n    - name: require-team-tag\n      identifier: address\n      match:\n        any:\n        - type: aws_s3_bucket\n      exclude:\n        any:\n        - name: bypass-me\n      validate:\n        assert:\n          all:\n          - values:\n              tags:\n                Team: ?*\n</code></pre> <p>In the example above, every resource having <code>type: aws_s3_bucket</code> will match, and payloads having <code>name: bypass-me</code> will be excluded.</p>"},{"location":"policies/policies/#identifying-payload-entries","title":"Identifying Payload Entries","text":"<p>A policy rule can contain an optional <code>identifier</code> which declares the path to the payload element that uniquely identifies each entry.</p>"},{"location":"policies/policies/#context-entries","title":"Context Entries","text":"<p>A policy rule can contain optional <code>context</code> entries that are made available to the rule via bindings:</p> <pre><code>apiVersion: json.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: required-s3-tags\nspec:\n  rules:\n    - name: require-team-tag\n      match:\n        any:\n        - type: aws_s3_bucket\n      context:\n      # creates a `expectedTeam` binding automatically\n      - name: expectedTeam\n        variable: Kyverno\n      validate:\n        message: Bucket `{{ name }}` does not have the required Team tag {{ $expectedTeam }}\n        assert:\n          all:\n          - values:\n              tags:\n                # use the `$expectedTeam` binding coming from the context\n                Team: ($expectedTeam)\n</code></pre>"},{"location":"policies/policies/#no-foreach-pattern-operators-anchors-or-wildcards","title":"No <code>forEach</code>, <code>pattern operators</code>, <code>anchors</code>, or <code>wildcards</code>","text":"<p>The use of assertion trees addresses some features of Kyverno policies that apply to Kubernetes resources.</p> <p>Specifically, forEach, pattern operators, anchors, or wildcards are not supported for policies that apply to JSON resources. Instead, assertion trees with JMESPath expressions are used to achieve the same powerful features.</p>"},{"location":"webapp/","title":"Usage","text":"<p><code>kyverno-json</code> can be deployed as a web application with a REST API. This is useful for deployments when a long running service that processes policy requests is desired.</p>"},{"location":"webapp/#managing-policies","title":"Managing Policies","text":"<p>With <code>kyverno-json</code> policies are managed as Kubernetes resources. This means that you can use Kubernetes APIs, <code>kubectl</code>, GitOps, or any other Kubernetes management tool to manage policies.</p>"},{"location":"webapp/#usage_1","title":"Usage","text":"<p>Here is a complete demonstration of how to use <code>kyverno-json</code> as an web application:</p> <p>Install CRDs</p> <p>Install the CRD for <code>kyverno-json</code>:</p> <pre><code>kubectl apply -f .crds/json.kyverno.io_validatingpolicies.yaml\n</code></pre> <p>Install policies:</p> <p>Install a sample policy:</p> <pre><code>kubectl apply -f test/commands/scan/dockerfile/policy.yaml\n</code></pre> <p>Prepare the payload</p> <p>The payload is a JSON object with two fields:</p> Name Type Required <code>payload</code> Object Y <code>preprocessors</code> Array of Strings N <p>You can construct a sample payload for the Dockerfile policy using:</p> <pre><code>cat test/commands/scan/dockerfile/payload.json | jq '{\"payload\": .}' &gt; /tmp/webapp-payload.json\n</code></pre> <p>Run the web application</p> <pre><code>./kyverno-json serve\n</code></pre> <p>This will show the output:</p> <pre><code>2023/10/29 23:46:11 configured route /api/scan\n2023/10/29 23:46:11 listening to requests on 0.0.0.0:8080\n</code></pre> <p>Send the REST API request</p> <pre><code>curl http://localhost:8080/api/scan -X POST -H \"Content-Type: application/json\" -d @/tmp/webapp-payload.json | jq\n</code></pre> <p>The configured policies will be applied to the payload and the results will be returned back:</p> <pre><code>{\n  \"results\": [\n    {\n      \"policy\": \"check-dockerfile\",\n      \"rule\": \"deny-external-calls\",\n      \"status\": \"fail\",\n      \"message\": \"HTTP calls are not allowed: all[0].check.~.(Stages[].Commands[].Args[].Value)[0].(contains(@, 'https://') || contains(@, 'http://')): Invalid value: true: Expected value: false; wget is not allowed: all[3].check.~.(Stages[].Commands[].CmdLine[])[0].(contains(@, 'wget')): Invalid value: true: Expected value: false\"\n    }\n  ]\n}\n</code></pre>"},{"location":"webapp/#helm-chart","title":"Helm Chart","text":"<p>The web application can be installed and managed in a Kubernetes cluster using Helm. </p> <p>See details at: https://github.com/kyverno/kyverno-json/tree/main/charts/kyverno-json</p>"},{"location":"catalog/","title":"Policy catalog","text":"<p>The <code>kyverno-json</code> policy catalog contains curated policies to be reused.</p> <p>You can share your policies with the community by opening a pull request here.</p>"},{"location":"catalog/#policies-indexed-by-tags","title":"Policies indexed by tags","text":""},{"location":"catalog/#aws","title":"aws","text":"<ul> <li>ECS cluster enable logging</li> <li>ECS requires container insights</li> <li>ECS public IP</li> <li>ECS require latest platform fargate</li> <li>ECS require filesystem read only</li> </ul>"},{"location":"catalog/#awsecs","title":"aws/ecs","text":"<ul> <li>ECS cluster enable logging</li> <li>ECS requires container insights</li> <li>ECS public IP</li> <li>ECS require latest platform fargate</li> <li>ECS require filesystem read only</li> </ul>"},{"location":"catalog/#dockerfile","title":"dockerfile","text":"<ul> <li>Dockerfile expose port 22 not allowed</li> <li>Dockerfile latest image tag not allowed</li> <li>Ensure apt is not used in Dockerfile</li> <li>Dockerfile last user is not allowed to be root</li> <li>Ensure sudo is not used in Dockerfile</li> </ul>"}]}